name: Generate /tools index

on:
  push:
    branches: [ main ]          # <-- change if your default branch isn't "main"
    paths:
      - 'tools/**'
  workflow_dispatch: {}
  schedule:
    - cron: '0 * * * *'         # hourly refresh

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect tools directory (case-insensitive) and list files
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          echo "Repository root:"
          pwd
          echo "Tree:"
          ls -la

          # Find real tools dir case-insensitively: tools / Tools / TOOLS...
          TOOLS_DIR=""
          while IFS= read -r -d '' d; do
            TOOLS_DIR="$d"; break
          done < <(find . -maxdepth 1 -type d -iname "tools" -print0)

          if [[ -z "${TOOLS_DIR}" ]]; then
            echo "No 'tools' directory found at repo root (case-insensitive). Creating ./tools"
            mkdir -p tools
            TOOLS_DIR="tools"
          else
            TOOLS_DIR="${TOOLS_DIR#./}"   # strip leading './'
          fi
          echo "TOOLS_DIR=${TOOLS_DIR}" >> $GITHUB_OUTPUT
          echo "Using tools dir: '${TOOLS_DIR}'"

          echo "Directory listing (${TOOLS_DIR}):"
          ls -la "${TOOLS_DIR}" || true

          echo "Git tracked files under ${TOOLS_DIR}:"
          git ls-files "${TOOLS_DIR}" || true

          # Gather: (A) direct *.html/*.htm files; (B) one-level subfolders with index.html
          mapfile -t DIRECT < <(find "${TOOLS_DIR}" -maxdepth 1 -type f \( -iname "*.html" -o -iname "*.htm" \) ! -iname "index.html" ! -iname "index.htm" -printf '%f\n' | sort -f)
          mapfile -t SUBIDX  < <(find "${TOOLS_DIR}" -maxdepth 2 -mindepth 2 -type f \( -iname "index.html" -o -iname "index.htm" \) -printf '%P\n' | sort -f)

          echo "Found ${#DIRECT[@]} direct HTML file(s):"
          for f in "${DIRECT[@]}"; do echo " - ${f}"; done

          echo "Found ${#SUBIDX[@]} subfolder index file(s):"
          for p in "${SUBIDX[@]}"; do echo " - ${p}"; done

          # Save lists to files for the next step
          printf '%s\n' "${DIRECT[@]}" > /tmp/direct.txt || true
          printf '%s\n' "${SUBIDX[@]}" > /tmp/subidx.txt || true

      - name: Build tools/index.html
        shell: bash
        run: |
          set -euo pipefail
          TOOLS_DIR="${{ steps.detect.outputs.TOOLS_DIR }}"
          mkdir -p "${TOOLS_DIR}"

          # Read lists (may be empty)
          mapfile -t DIRECT < /tmp/direct.txt || true
          mapfile -t SUBIDX < /tmp/subidx.txt || true

          PYTHON3=$(command -v python3 || command -v python)
          "$PYTHON3" - <<'PY' "${TOOLS_DIR}" "${DIRECT[@]}" "::SEP::" "${SUBIDX[@]}"
import sys, os, html, datetime

# Args: tools_dir, then direct files, then marker "::SEP::", then subidx paths
args = sys.argv[1:]
tools_dir = args[0]
rest = args[1:]
direct = []
subidx = []
if "::SEP::" in rest:
    i = rest.index("::SEP::")
    direct = rest[:i]
    subidx  = rest[i+1:]
else:
    direct = rest

updated = datetime.datetime.utcnow().replace(microsecond=0).isoformat()+"Z"

def label(name):
    for ext in (".html",".htm",".HTML",".HTM"):
        if name.endswith(ext): return name[:-len(ext)]
    return name

def hue(s):
    h = 2166136261
    for ch in s:
        h ^= ord(ch); h = (h * 16777619) & 0xffffffff
    return h % 360

def gradient(key):
    h = hue(key); h2 = (h + 24) % 360
    return f"linear-gradient(180deg, hsl({h} 75% 46%), hsl({h2} 78% 44%))"

# Build button HTML
buttons = []

# A) direct files: link /tools/<file>
for f in direct:
    href = f"/{tools_dir}/{html.escape(f, quote=True)}"
    text = html.escape(label(f))
    buttons.append(f'<a class="tool" href="{href}" target="_blank" rel="noopener" style="background:{gradient(f)}">{text} ✨</a>')

# B) subfolder index: paths like "<folder>/index.html" -> link "/tools/<folder>/"
for p in subidx:
    folder = p.split('/', 1)[0]
    href = f"/{tools_dir}/{html.escape(folder, quote=True)}/"
    text = html.escape(folder)
    buttons.append(f'<a class="tool" href="{href}" target="_blank" rel="noopener" style="background:{gradient(folder)}">{text} ✨</a>')

# Sort by label, stable
from bs4 import BeautifulSoup as BS  # fallback: avoid; but Actions runner has no bs4 by default. We'll skip sorting by parsed.
# Simpler: sort using key extracted before building:
def sort_key(btn_html):
    # Extract label before the emoji (ends with ' ✨</a>')
    try:
        return btn_html.split('>')[2].rsplit(' ✨',1)[0].lower()
    except:
        return btn_html

buttons.sort(key=sort_key)

html_out = f"""<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" /><meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="color-scheme" content="light dark" /><title>tools</title>
<style>
:root{{ --bg:#0f1220; --panel:#14182a; --ink:#e9ecf8; --shadow:0 16px 40px rgba(0,0,0,.38) }}
@media (prefers-color-scheme: light){{ :root{{ --bg:#f6f7fb; --panel:#fff; --ink:#0f1426; --shadow:0 18px 40px rgba(12,24,60,.08) }} }}
*{{box-sizing:border-box}} html,body{{height:100%}}
body{{margin:0;color:var(--ink);font-family:-apple-system,system-ui,Segoe UI,Roboto,Helvetica,Arial,Apple Color Emoji,Segoe UI Emoji;
     background:radial-gradient(1200px 520px at 0% -10%, rgba(110,86,207,.25), transparent 60%),
                radial-gradient(900px 360px at 110% 0%, rgba(69,231,179,.20), transparent 60%),var(--bg);
     display:flex;align-items:stretch;justify-content:center}}
.board{{width:100%;max-width:1100px;margin:16px;padding:16px;background:var(--panel);
       border:1px solid rgba(255,255,255,.08);border-radius:18px;box-shadow:var(--shadow)}}
.grid{{display:grid;grid-template-columns:repeat(12,1fr);gap:12px}}
@media (max-width:980px){{.grid{{grid-template-columns:repeat(8,1fr)}}}}
@media (max-width:640px){{.grid{{grid-template-columns:repeat(2,1fr)}}}}
a.tool{{grid-column:span 3;display:inline-flex;align-items:center;justify-content:center;text-decoration:none;text-align:center;
       padding:14px 12px;min-height:56px;border-radius:14px;color:#fff;font-weight:700;letter-spacing:.2px;
       border:1px solid rgba(255,255,255,.12);box-shadow:0 12px 26px rgba(0,0,0,.25);
       transition:transform .06s,box-shadow .12s;word-break:break-word;backdrop-filter:saturate(110%)}}
@media (max-width:980px){{a.tool{{grid-column:span 4}}}} @media (max-width:640px){{a.tool{{grid-column:span 2}}}}
a.tool:hover{{transform:translateY(-1px);box-shadow:0 14px 30px rgba(0,0,0,.30)}}
.tiny{{margin-top:10px;font:12px/1.3 ui-monospace,monospace;color:#9aa3bf;text-align:center;opacity:.85}}
</style></head>
<body>
  <div class="board">
    <div class="grid">
      {''.join(buttons)}
    </div>
    <div class="tiny">Last updated: {html.escape(updated)} • {len(buttons)} link(s)</div>
  </div>
</body></html>"""

out_path = os.path.join(tools_dir, "index.html")
with open(out_path, "w", encoding="utf-8") as f:
    f.write(html_out)
print(f"Wrote {out_path} with {len(buttons)} entries at {updated}")
PY

      - name: Upload generated index for preview
        uses: actions/upload-artifact@v4
        with:
          name: generated-tools-index
          path: "${{ steps.detect.outputs.TOOLS_DIR }}/index.html"

      - name: Commit index.html if changed
        shell: bash
        run: |
          set -e
          TOOLS_DIR="${{ steps.detect.outputs.TOOLS_DIR }}"
          if [[ -n "$(git status --porcelain "${TOOLS_DIR}/index.html")" ]]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add "${TOOLS_DIR}/index.html"
            git commit -m "build(tools): regenerate index.html"
            git push
          else
            echo "No changes to commit."
          fi
