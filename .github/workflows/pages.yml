name: Build & Deploy Pages (tools)

on:
  push:                  # run on any push to this repo
  workflow_dispatch: {}  # allow manual runs

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare _site (copy repo)
        run: |
          rm -rf _site
          mkdir -p _site
          shopt -s dotglob
          cp -r * _site || true

      - name: Generate root index.html (auto buttons + labels.json support)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Detect base path automatically:
            // - user/org site repo ends with .github.io -> base = ''
            // - project repo (e.g., 'tools')          -> base = '/<repo>'
            const repo = process.env.GITHUB_REPOSITORY.split('/')[1];
            const isUserSite = /\.github\.io$/i.test(repo);
            const base = isUserSite ? '' : `/${repo}`;

            const siteRoot = '_site';

            // Load optional labels.json from repo root (already copied into _site)
            const labelsPath = path.join(siteRoot, 'labels.json');
            let labels = {};
            if (fs.existsSync(labelsPath)) {
              try {
                const raw = JSON.parse(fs.readFileSync(labelsPath, 'utf8'));
                // Normalize: allow string or object per key
                for (const [k, v] of Object.entries(raw)) {
                  if (typeof v === 'string') labels[k] = { label: v };
                  else if (v && typeof v === 'object') {
                    labels[k] = {
                      label: v.label ?? '',
                      emoji: v.emoji ?? '',
                      color: v.color ?? ''   // optional hex or CSS color
                    };
                  }
                }
              } catch (e) {
                console.warn('⚠️ labels.json parse error:', e.message);
              }
            }

            // Read entries at repo root inside artifact (this project repo publishes at /<repo>/)
            const entries = fs.readdirSync(siteRoot, { withFileTypes: true })
              // ignore CI and non-content folders
              .filter(e => !['.github','_site','node_modules','.git'].includes(e.name));

            // A) Direct .html files in root (exclude index.html)
            const direct = entries
              .filter(e => e.isFile() && /\.html?$/i.test(e.name) && !/^index\.html?$/i.test(e.name))
              .map(e => e.name);

            // B) One-level subfolders that contain index.html/htm
            const subidxDirs = entries
              .filter(e => e.isDirectory())
              .map(d => {
                const p1 = path.join(siteRoot, d.name, 'index.html');
                const p2 = path.join(siteRoot, d.name, 'index.htm');
                return (fs.existsSync(p1) || fs.existsSync(p2)) ? d.name : null;
              })
              .filter(Boolean);

            // Visual helpers
            const stripExt = s => s.replace(/\.html?$/i,'');
            const hue = s => { let h = 2166136261 >>> 0; for (const ch of s) { h ^= ch.charCodeAt(0); h = Math.imul(h, 16777619) >>> 0 } return h % 360; };
            const gradient = k => {
              const h = hue(k), h2 = (h + 24) % 360;
              return `linear-gradient(180deg, hsl(${h} 75% 46%), hsl(${h2} 78% 44%))`;
            };

            // Build button HTML
            const makeBtn = (href, key, display) => {
              const meta = labels[key] || {};
              const label = (meta.label || display || stripExt(key));
              const emoji = meta.emoji ? ` ${meta.emoji}` : ' ✨';
              const styleBg = meta.color ? `background:${meta.color}` : `background:${gradient(key)}`;
              return `<a class="tool" href="${href}" target="_blank" rel="noopener" style="${styleBg}">${label}${emoji}</a>`;
            };

            const buttons = [];

            // Direct files → /<base>/<file>
            for (const f of direct.sort((a,b)=>a.localeCompare(b))) {
              buttons.push(makeBtn(`${base}/${encodeURIComponent(f)}`, f, stripExt(f)));
            }

            // Subfolder index → /<base>/<folder>/
            for (const d of subidxDirs.sort((a,b)=>a.localeCompare(b))) {
              const key = `${d}/index.html`; // allows labels.json to target folder buttons
              buttons.push(makeBtn(`${base}/${encodeURIComponent(d)}/`, key, d));
            }

            const updated = new Date().toISOString().replace(/\.\d{3}Z$/,'Z');
            const html = `<!doctype html><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
            <title>tools</title><meta name="color-scheme" content="light dark">
            <style>
              :root{--bg:#0f1220;--panel:#14182a;--ink:#e9ecf8}
              @media (prefers-color-scheme:light){:root{--bg:#f6f7fb;--panel:#fff;--ink:#0f1426}}
              *{box-sizing:border-box}html,body{height:100%}
              body{margin:0;background:var(--bg);color:var(--ink);font-family:-apple-system,system-ui,Segoe UI,Roboto;display:flex;justify-content:center}
              .board{max-width:1000px;margin:16px;padding:16px;background:var(--panel);border-radius:14px;border:1px solid rgba(255,255,255,.08)}
              .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(200px,1fr));gap:12px}
              a.tool{display:flex;align-items:center;justify-content:center;padding:14px 12px;min-height:56px;border-radius:12px;color:#fff;text-decoration:none;font-weight:600;
                     border:1px solid rgba(255,255,255,.12);box-shadow:0 10px 24px rgba(0,0,0,.25)}
              a.tool:hover{transform:translateY(-1px)}
              .tiny{margin-top:10px;font:12px/1.3 ui-monospace,monospace;color:#9aa3bf;text-align:center}
            </style>
            <div class="board">
              <div class="grid">${buttons.join('')}</div>
              <div class="tiny">Last updated: ${updated} • ${buttons.length} link(s)</div>
            </div>`;

            // Write index at site root so project site loads buttons at https://<user>.github.io/<repo>/
            fs.writeFileSync(path.join(siteRoot, 'index.html'), html);
            console.log(`Root index generated with ${buttons.length} button(s). Base path: '${base}'`);

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
