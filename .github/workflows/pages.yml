name: Build & Deploy Pages (tools index)

on:
  push:
    branches: [ main ]         # ← change if your default branch is different
    paths:
      - '**'                   # deploy on any change (or narrow to 'tools/**')
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Generate /tools/index.html (+ root redirect)
        shell: bash
        run: |
          set -euo pipefail
          # detect tools dir case-insensitively
          TOOLS_DIR=$(find . -maxdepth 1 -type d -iname tools -print -quit)
          if [[ -z "${TOOLS_DIR}" ]]; then
            echo "No tools dir; creating ./tools"
            TOOLS_DIR=./tools
            mkdir -p "${TOOLS_DIR}"
          fi
          TOOLS_DIR="${TOOLS_DIR#./}"

          echo "Using tools dir: ${TOOLS_DIR}"
          ls -la "${TOOLS_DIR}" || true

          # list direct html files (skip index.html)
          mapfile -t DIRECT < <(find "${TOOLS_DIR}" -maxdepth 1 -type f \
            \( -iname '*.html' -o -iname '*.htm' \) ! -iname 'index.html' ! -iname 'index.htm' \
            -printf '%f\n' | sort -f)

          # list one-level subfolder index.html
          mapfile -t SUBIDX < <(find "${TOOLS_DIR}" -maxdepth 2 -mindepth 2 -type f \
            \( -iname 'index.html' -o -iname 'index.htm' \) -printf '%P\n' | sort -f)

          echo "Direct HTML: ${#DIRECT[@]}"
          printf '  - %s\n' "${DIRECT[@]:-}" || true
          echo "Subfolder index: ${#SUBIDX[@]}"
          printf '  - %s\n' "${SUBIDX[@]:-}" || true

          python3 - <<'PY' "${TOOLS_DIR}" "${DIRECT[@]}" "::SEP::" "${SUBIDX[@]}"
import sys, os, html, datetime
tools_dir = sys.argv[1]
rest = sys.argv[2:]
direct = []
subidx = []
if "::SEP::" in rest:
    i = rest.index("::SEP::")
    direct = rest[:i]
    subidx  = rest[i+1:]
else:
    direct = rest

updated = datetime.datetime.utcnow().replace(microsecond=0).isoformat()+"Z"

def label(name):
    for ext in (".html",".htm",".HTML",".HTM"):
        if name.endswith(ext): return name[:-len(ext)]
    return name

def hue(s):
    h = 2166136261
    for ch in s:
        h ^= ord(ch); h = (h * 16777619) & 0xffffffff
    return h % 360

def gradient(key):
    h = hue(key); h2 = (h + 24) % 360
    return f"linear-gradient(180deg, hsl({h} 75% 46%), hsl({h2} 78% 44%))"

buttons = []
# A) direct files → /tools/<file>
for f in direct:
    href = f"/{tools_dir}/{html.escape(f, quote=True)}"
    text = html.escape(label(f))
    buttons.append(f'<a class="tool" href="{href}" target="_blank" rel="noopener" style="background:{gradient(f)}">{text} ✨</a>')

# B) subfolder index → /tools/<folder>/
for p in subidx:
    folder = p.split('/', 1)[0]
    href = f"/{tools_dir}/{html.escape(folder, quote=True)}/"
    text = html.escape(folder)
    buttons.append(f'<a class="tool" href="{href}" target="_blank" rel="noopener" style="background:{gradient(folder)}">{text} ✨</a>')

# sort by label (string contains “…>LABEL ✨</a>”)
def sort_key(btn_html):
    try: return btn_html.split('>')[2].rsplit(' ✨',1)[0].lower()
    except: return btn_html
buttons.sort(key=sort_key)

base_css = """
:root{ --bg:#0f1220; --panel:#14182a; --ink:#e9ecf8; --shadow:0 16px 40px rgba(0,0,0,.38) }
@media (prefers-color-scheme: light){ :root{ --bg:#f6f7fb; --panel:#fff; --ink:#0f1426; --shadow:0 18px 40px rgba(12,24,60,.08) } }
*{box-sizing:border-box} html,body{height:100%}
body{margin:0;color:var(--ink);font-family:-apple-system,system-ui,Segoe UI,Roboto,Helvetica,Arial,Apple Color Emoji,Segoe UI Emoji;
     background:radial-gradient(1200px 520px at 0% -10%, rgba(110,86,207,.25), transparent 60%),
                radial-gradient(900px 360px at 110% 0%, rgba(69,231,179,.20), transparent 60%),var(--bg);
     display:flex;align-items:stretch;justify-content:center}
.board{width:100%;max-width:1100px;margin:16px;padding:16px;background:var(--panel);
       border:1px solid rgba(255,255,255,.08);border-radius:18px;box-shadow:var(--shadow)}
.grid{display:grid;grid-template-columns:repeat(12,1fr);gap:12px}
@media (max-width:980px){.grid{grid-template-columns:repeat(8,1fr)}}
@media (max-width:640px){.grid{grid-template-columns:repeat(2,1fr)}}
a.tool{grid-column:span 3;display:inline-flex;align-items:center;justify-content:center;text-decoration:none;text-align:center;
       padding:14px 12px;min-height:56px;border-radius:14px;color:#fff;font-weight:700;letter-spacing:.2px;
       border:1px solid rgba(255,255,255,.12);box-shadow:0 12px 26px rgba(0,0,0,.25);
       transition:transform .06s,box-shadow .12s;word-break:break-word;backdrop-filter:saturate(110%)}
@media (max-width:980px){a.tool{grid-column:span 4}} @media (max-width:640px){a.tool{grid-column:span 2}}
a.tool:hover{transform:translateY(-1px);box-shadow:0 14px 30px rgba(0,0,0,.30)}
.tiny{margin-top:10px;font:12px/1.3 ui-monospace,monospace;color:#9aa3bf;text-align:center;opacity:.85}
"""

html_tools = f"""<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8" /><meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="color-scheme" content="light dark" /><title>tools</title>
<style>{base_css}</style></head>
<body>
  <div class="board">
    <div class="grid">
      {''.join(buttons)}
    </div>
    <div class="tiny">Last updated: {html.escape(updated)} • {len(buttons)} link(s)</div>
  </div>
</body></html>"""

os.makedirs(tools_dir, exist_ok=True)
with open(os.path.join(tools_dir, "index.html"), "w", encoding="utf-8") as f:
    f.write(html_tools)

# optional: root redirect to /tools/
html_root = """<!DOCTYPE html><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>→ /tools</title><link rel="canonical" href="/tools/">
<meta http-equiv="refresh" content="0; url=/tools/">
<script>location.replace("/tools/"+location.search+location.hash);</script>"""
with open("index.html", "w", encoding="utf-8") as f:
    f.write(html_root)

print(f"Wrote {os.path.join(tools_dir,'index.html')} and root redirect.")
PY

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'   # deploy the repo root (includes /tools and root index)

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
